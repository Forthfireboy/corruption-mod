import StringTools;
import flixel.math.FlxMath;
import openfl.filters.ShaderFilter;
import openfl.Lib;
//import tgt.gallery.ComicReader;

importClass("Discord");
importClass("FadeTransitionSubstate");
importClass("MusicBeatState");
importClass("LoadingState");
importClass("options.OptionsState");
importClass("options.OptionsSubstate");
importClass("tgt.MainMenuState");
importClass("tgt.gallery.ComicReader");
importClass("CreditsState");

var object:FlxSprite;

// camera
var camFollow:FlxSprite;
var camFollowPos:FlxObject;

var curSelected:Int = 0;
var curLang:Bool = true; // doin it as bool cuz shorter code lol
var canSelect:Bool = true;
var curSection:String = "main";

var blackTop:FlxSprite;

var initialTween:FlxTween;
var jpTween:FlxTween;
var engTween:FlxTween;

var addY:Int = 800;

function onStateCreate(){
    persistentUpdate = true;
	persistentDraw = true;

    FadeTransitionSubstate.nextCamera = FlxG.camera; // AAAA
    
    Paths.pushGlobalContent();
    Paths.loadTheFirstEnabledMod();
    FlxG.mouse.visible = false;
    FlxG.camera.bgColor = FlxColor.BLACK;

    camFollow = new FlxSprite().makeGraphic(1, 1, 0xFF000000);
    camFollow.alpha = 0;
    camFollow.setPosition(636,392);
    //FlxTween.tween(camFollowPos,  {x: camFollowPos.x + 1000}, 1.0, {ease: FlxEase.sineInOut, type: FlxTween.PINGPONG});
    camFollowPos = new FlxObject(636,392, 1, 1);
    add(camFollow);
    add(camFollowPos);

    FlxG.camera.zoom = 0.593;
    FlxG.camera.follow(camFollowPos, null, 1);

    //musicPlayer = new FlxSound().loadEmbedded(Paths.music('menu4'),true);
    //musicPlayer.play();
    FlxG.sound.playMusic(Paths.music('menu4'), 1);

    // var bg:FlxSprite = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/gradient"));
    // bg.scrollFactor.set();
    // bg.screenCenter();
    // add(bg);
    // bg.setPosition(571,-109);
    // bg.scale.set(0.8,2);
    // bg.alpha = 0;
    // bg.color = FlxColor.RED;

    var bg = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/gradient"));
    bg.scrollFactor.set();
    bg.screenCenter();
    add(bg);
    bg.alpha = 0;
    bg.scale.set(1.7,1.7);
    FlxTween.tween(bg,  {alpha: 0.6}, 10.0, {ease: FlxEase.sineInOut, type: FlxTween.PINGPONG});

    var chains = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/chains"));
    chains.scrollFactor.set();
    chains.screenCenter();
    chains.scale.set(1.7,1.7);
    add(chains);

    //var l1 = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/l1"));
    //l1.scrollFactor.set();
    //l1.screenCenter();
    //add(l1);
    //l1.scale.set(1.7,1.7);

    thumb1 = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/1Thumbnail"));
    thumb1.scrollFactor.set(1,1);
    thumb1.screenCenter();
    add(thumb1);
    thumb1.setPosition(-1313,-1819);
    thumb1.scale.set(0.12,0.12);

    thumb2 = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/2Thumbnail"));
    thumb2.scrollFactor.set(1,1);
    thumb2.screenCenter();
    add(thumb2);
    thumb2.setPosition(-932,-1889);
    thumb2.scale.set(0.115,0.115);

    thumb3 = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/3Thumbnail"));
    thumb3.scrollFactor.set(1,1);
    thumb3.screenCenter();
    add(thumb3);
    thumb3.setPosition(183,-945.5);
    thumb3.scale.set(0.2,0.2);

    c1 = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/c1"));
    c1.scrollFactor.set(1,1);
    c1.screenCenter();
    add(c1);
    c1.scale.set(1.7,1.7);

    c2 = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/c2"));
    c2.scrollFactor.set(1,1);
    c2.screenCenter();
    add(c2);
    c2.scale.set(1.7,1.7);
    
    c3 = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/c3"));
    c3.scrollFactor.set(1,1);
    c3.screenCenter();
    add(c3);
    c3.scale.set(1.7,1.7);

    s1 = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/s1"));
    s1.scrollFactor.set(1,1);
    s1.screenCenter();
    add(s1);
    s1.scale.set(1.7,1.7);
    s1.alpha = 0;

    s2 = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/s2"));
    s2.scrollFactor.set(1,1);
    s2.screenCenter();
    add(s2);
    s2.scale.set(1.7,1.7);
    s2.alpha = 0;
    
    s3 = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/s3"));
    s3.scrollFactor.set(1,1);
    s3.screenCenter();
    add(s3);
    s3.scale.set(1.7,1.7);
    s3.alpha = 0;

    overlay = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/overlay"));
    overlay.scrollFactor.set();
    overlay.screenCenter();
    overlay.scale.set(1.6,3.2);
    overlay.alpha = 0;
    add(overlay);
    
    jp = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/jp"));
    jp.scrollFactor.set(1,1);
    jp.screenCenter();
    jp.scale.set(1.6,1.6);
    jp.alpha = 0;
    jp.y = 195+addY;
    add(jp);

    eng = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/eng"));
    eng.scrollFactor.set(1,1);
    eng.screenCenter();
    eng.scale.set(1.7,1.7);
    eng.alpha = 0;
    eng.y = 195 +addY;
    add(eng);

    jpText = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/l1"));
    jpText.scrollFactor.set(1,1);
    jpText.scale.set(1.7,1.7);
    jpText.alpha = 0;
    jpText.y = addY;
    add(jpText);

    engText = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/l2"));
    engText.scrollFactor.set(1,1);
    engText.scale.set(1.7,1.7);
    engText.alpha = 0;
    engText.y = addY;
    add(engText);

    jpTextSelected = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/ls1"));
    jpTextSelected.scrollFactor.set(1,1);
    jpTextSelected.scale.set(1.7,1.7);
    jpTextSelected.alpha = 0;
    jpTextSelected.setPosition(-20,6+addY);
    add(jpTextSelected);

    engTextSelected = new FlxSprite().loadGraphic(Paths.image("menus/sidestory/ls2"));
    engTextSelected.scrollFactor.set(1,1);
    engTextSelected.scale.set(1.7,1.7);
    engTextSelected.alpha = 0;
    engTextSelected.setPosition(18,9+addY);
    add(engTextSelected);

    blackTop = new FlxSprite(10,-20, Paths.image('menus/mainmenu/fullBlack'));
    blackTween = FlxTween.tween(blackTop,  {alpha: 0}, 1.0, {ease: FlxEase.sineIn});

    add(blackTop);
    blackTop.scrollFactor.set(0,0);
    blackTop.scale.set(1.7,1.7);

    updateSelected();
    
    addTouchPad("LEFT_RIGHT", "A_B");
    addTouchPadCamera();

    object = overlay;
}

function onUpdate(elapsed:Float){
    if (curSection == "lang"){
        inputShitLang();
    } else {
        inputShit();
    }
    
}

function updateSelected(){
    switch(curSelected){
        case 0:
            thumb1.scale.set(0.13,0.13);
            thumb2.scale.set(0.115,0.115);
            thumb3.scale.set(0.2,0.2);

            s1.alpha = 1;
            s2.alpha = 0;
            s3.alpha = 0;

            c1.alpha = 0;
            c2.alpha = 1;
            c3.alpha = 1;

            thumb1.alpha = 1;
            thumb2.alpha = 0.4;
            thumb3.alpha = 0.4;
        case 1:
            thumb1.scale.set(0.12,0.12);
            thumb2.scale.set(0.125,0.125);
            thumb3.scale.set(0.2,0.2);

            s1.alpha = 0;
            s2.alpha = 1;
            s3.alpha = 0;

            c1.alpha = 1;
            c2.alpha = 0;
            c3.alpha = 1;

            thumb1.alpha = 0.4;
            thumb2.alpha = 1;
            thumb3.alpha = 0.4;
        case 2:
            thumb1.scale.set(0.12,0.12);
            thumb2.scale.set(0.115,0.115);
            thumb3.scale.set(0.21,0.21);

            s1.alpha = 0;
            s2.alpha = 0;
            s3.alpha = 1;

            c1.alpha = 1;
            c2.alpha = 1;
            c3.alpha = 0;

            thumb1.alpha = 0.4;
            thumb2.alpha = 0.4;
            thumb3.alpha = 1;
    }
}

function updateLang(){
    if (jpTween != null){
        jpTween.cancel();
        jpTween.destroy();
    }

    if (engTween != null){
        engTween.cancel();
        engTween.destroy();
    }

    if (curLang == false){
        //jp.alpha = 1;
        //eng.alpha = 0.4;

        jpTween = FlxTween.tween(jp, {alpha: 1}, 0.6, {ease: FlxEase.circInOut});
        engTween = FlxTween.tween(eng, {alpha: 0.4}, 0.6, {ease: FlxEase.circInOut});

        eng.scale.set(1.6,1.6);
        jp.scale.set(1.7,1.7);

        jpText.alpha = 0;
        engText.alpha = 0.4;
        jpTextSelected.alpha = 1;
        engTextSelected.alpha = 0;
    } else {
        eng.scale.set(1.7,1.7);
        jp.scale.set(1.6,1.6);

       // jp.alpha = 0.4;
        //eng.alpha = 1;

        jpTween = FlxTween.tween(jp, {alpha: 0.4}, 0.6, {ease: FlxEase.circInOut});
        engTween = FlxTween.tween(eng, {alpha: 1}, 0.6, {ease: FlxEase.circInOut});

        jpText.alpha = 0.4;
        engText.alpha = 0;
        jpTextSelected.alpha = 0;
        engTextSelected.alpha = 1;
    }

    if (curSection == "main"){
        jpTween = FlxTween.tween(jp, {alpha: 0}, 0.6, {ease: FlxEase.circInOut});
        engTween = FlxTween.tween(eng, {alpha: 0}, 0.6, {ease: FlxEase.circInOut});

        //jp.alpha = 0;
        //eng.alpha = 0;

        jpText.alpha = 0;
        engText.alpha = 0;
        jpTextSelected.alpha = 0;
        engTextSelected.alpha = 0;
    }
}

function inputShit(){
    if (!canSelect){return;}

    if (FlxG.keys.justPressed.SPACE || FlxG.keys.justPressed.ENTER|| FlxG.keys.justPressed.Z || controls.ACCEPT){
        enterLang();
        canSelect = false;
        new FlxTimer().start(0.7, function(tmr){
            canSelect = true;
            tmr.destroy();
        });
    }

    if (FlxG.keys.justPressed.ESCAPE || FlxG.keys.justPressed.BACKSPACE|| FlxG.keys.justPressed.X || controls.BACK){
        backOut();
        canSelect = false;
        FlxG.sound.play(Paths.sound('cancelMenu'));
    }

    if (FlxG.keys.justPressed.A || FlxG.keys.justPressed.LEFT || controls.UI_LEFT)
    {
        FlxG.sound.play(Paths.sound('scrollMenu'));
        curSelected -= 1;
        if (curSelected < 0){
            curSelected = 2;
        }
        updateSelected();
    }

   else if (FlxG.keys.justPressed.RIGHT || FlxG.keys.justPressed.D || controls.UI_RIGHT)
    {
        FlxG.sound.play(Paths.sound('scrollMenu'));
        curSelected += 1;
        if (curSelected >= 3){
            curSelected = 0;
        }
        updateSelected();
    }
}

function inputShitLang(){
    if (!canSelect){return;}

    if (FlxG.keys.justPressed.SPACE || FlxG.keys.justPressed.ENTER|| FlxG.keys.justPressed.Z|| controls.ACCEPT){
        startComic();
    }

    if (FlxG.keys.justPressed.ESCAPE || FlxG.keys.justPressed.BACKSPACE|| FlxG.keys.justPressed.X||controls.BACK){
        backToMain();
        canSelect = false;
        new FlxTimer().start(0.7, function(tmr){
            canSelect = true;
            tmr.destroy();
        });
        FlxG.sound.play(Paths.sound('cancelMenu'));
    }

    if (FlxG.keys.justPressed.A || FlxG.keys.justPressed.LEFT || FlxG.keys.justPressed.RIGHT || FlxG.keys.justPressed.D || controls.UI_LEFT || controls.UI_RIGHT)
    {
        FlxG.sound.play(Paths.sound('scrollMenu'));
        curLang = !curLang;
        updateLang();
    }
}

function enterLang(){ // language options
    FlxG.sound.play(Paths.sound('confirmMenu'));
    curSection = "lang";
    overlay.alpha = 1;
    initialTween = FlxTween.tween(camFollowPos, {y: 951}, 0.6, {ease: FlxEase.circInOut});
    updateLang();
}

function leaveScene(){
    //musicPlayer.volume = 0;
    var state = new HScriptState("softCodeMenu");
    MusicBeatState.switchState(state);
}

function backOut(){
    FlxG.sound.play(Paths.sound('cancelMenu'));
    // back to main menu / title screen
    
    blackTween = FlxTween.tween(blackTop,  {alpha: 1}, 1.0, {ease: FlxEase.sineOut});
    new FlxTimer().start(1, function(tmr){
        leaveScene();
        tmr.destroy();
    });
}

var englishChapters = [
	{
		name: "chapter-1",
		pages: []
	},
	{
		name: "chapter-2",
		pages: []
	},
	{
		name: "chapter-3",
		pages: []
	}
];

var japaneseChapters = [
	{
		name: "chapter-1",
		pages: []
	},
	{
		name: "chapter-2", 
		pages: []
	},
	{
		name: "chapter-3",
		pages: []
	}
];

for(ch in englishChapters){
	var n = ch.name;
	var idx = 1;
	var prevPage;
	while(true){
		var name = n + "-english-" + idx;
		var path = Paths.getPath('images/cutscenes/' + name + ".png");
		trace(path);
		if(Paths.exists(path)){
			
			
			var page = {
				visualName: "Page " + idx,
				name: name,
				prevPage: prevPage
			};

			if(prevPage != null)
				prevPage.nextPage = page;

			prevPage = page;
			ch.pages.push(page);
			
			idx += 1;
		}else
			break;
		
	}
}


for(ch in japaneseChapters){
	var n = ch.name;
	var idx = 1;
	var prevPage;
	while(true){
		var name = n + "-japanese-" + idx;
		var path = Paths.getPath('images/cutscenes/' + name + ".png");
		trace(path);
		if(Paths.exists(path)){
			
			
			var page = {
				visualName: "Page " + idx, // TODO: Localize
				name: name,
				prevPage: prevPage
			};

			if(prevPage != null)
				prevPage.nextPage = page;

			prevPage = page;
			ch.pages.push(page);
			
			idx += 1;
		}else
			break;
		
	}
}

function startComic(){
    FlxG.sound.play(Paths.sound('confirmMenu'));
	var chapters = japaneseChapters;
	if(curLang)
		chapters = englishChapters;

	var state = new ComicReader(chapters[curSelected].pages[0]);
	FlxG.switchState(state);
}

function backToMain(){ // back to main section
    curSection = "main";
    initialTween = FlxTween.tween(camFollowPos, {y: 392}, 0.6, {ease: FlxEase.circInOut});
    overlay.alpha = 0;
    updateLang();
}

